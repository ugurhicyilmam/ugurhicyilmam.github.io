<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Bir yazılımcının notları...</title>
    <link>https://ugurhicyilmam.github.io/blog/</link>
    <description>Recent content in Blog on Bir yazılımcının notları...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>TR</language>
    <lastBuildDate>Thu, 21 Sep 2017 20:52:07 +0300</lastBuildDate>
    
	<atom:link href="https://ugurhicyilmam.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java I/O - Part 1</title>
      <link>https://ugurhicyilmam.github.io/blog/java-io-p1/</link>
      <pubDate>Thu, 21 Sep 2017 20:52:07 +0300</pubDate>
      
      <guid>https://ugurhicyilmam.github.io/blog/java-io-p1/</guid>
      <description>Pek çok uygulamada yapılan temel iş aslında veri giriş-çıkışıdır. Bir kaynaktan veri alınır, veriyle bazı işler yapılır ve işlenen veriler çıktı olarak bir yere gönderilir. Network ile çalışan uygulamalarda da durum böyledir: Bir kaynaktan veri alınır ve başka bir kaynağa veri gönderilir. Java&amp;rsquo;nın gelişmiş I/O yapısı sayesinde, bir dosyadan veri okumak ile başka bir sunucudan veri okumak arasında pek fark yoktur. Aynı şekilde bir dosyaya veri yazmak ile başka bir makineye veri göndermek de birbirine oldukça benzer.</description>
    </item>
    
    <item>
      <title>Katmanlı Mimari&#39;de Paketleme Şekli</title>
      <link>https://ugurhicyilmam.github.io/blog/katmanli-mimari-paketleme-sekli/</link>
      <pubDate>Mon, 18 Sep 2017 19:43:57 +0300</pubDate>
      
      <guid>https://ugurhicyilmam.github.io/blog/katmanli-mimari-paketleme-sekli/</guid>
      <description>Uygulama geliştirme sürecinde verilmesi gereken önemli kararlardan biri kaynak kodları paketlere bölme şeklidir. Katmanlı mimaride genellikle uygulanan yöntem her katman için bir paket oluşturup, sınıfları bulunduğu katmanın paketine atmaktır. Katmanlı mimari anlaşılması son derece kolay bir mimari yaklaşım olup pek çok problemi çözer. Zaten bu yazı da bir katmanlı mimari eleştirisi değil. Ancak paketleri de bu katmanlı yapıya göre düzenlemek her zaman en iyi çözüm olmayabilir.
Katmanlı mimaride tipik olarak “_presentation_”, “_application_”, “_domain_”, “_infrastructure_” gibi katmanlar bulunur.</description>
    </item>
    
    <item>
      <title>Firmalar Hangi Tip Mühendisleri İşe Almak İstiyor?</title>
      <link>https://ugurhicyilmam.github.io/blog/teknik-gelisim/</link>
      <pubDate>Fri, 26 May 2017 15:51:10 +0300</pubDate>
      
      <guid>https://ugurhicyilmam.github.io/blog/teknik-gelisim/</guid>
      <description>Yazılım endüstrisinde çalışan herkes bir döneminde şu soruyla karşılaşıyor: kendimi nasıl geliştirmeliyim ki firmaların işe almak istediği bir mühendis haline geleyim. Bu soruyu cevaplayabilmek için teknik yeteneklerin gelişimini ve ideal mühendis tipini biraz irdelemek gerekiyor.
Mühendislerin yetenekleri genel olarak iki şekilde değerlendirilir: genişlik ve derinlik. Genişlik, farklı alanlar hakkında belirli bir düzeyde bilgi sahibi olmak anlamına gelirken derinlik, spesifik bir alanda çok ufak detaylara bile hakim olabilmek, o alanın zor problemlerini çözebiliyor olmak anlamına gelir.</description>
    </item>
    
    <item>
      <title>Java&#39;nın HashMap İmplementasyonu</title>
      <link>https://ugurhicyilmam.github.io/blog/javanin-hashmap-implementasyonu/</link>
      <pubDate>Mon, 22 May 2017 11:48:39 +0300</pubDate>
      
      <guid>https://ugurhicyilmam.github.io/blog/javanin-hashmap-implementasyonu/</guid>
      <description>HashMap, Java içerisindeki önemli konulardan biri ve bu nedenle teknik görüşmelerde karşılaşmanız yüksek ihtimal. Bu yazıda kısaca HashMap mantığıyla giriş yaptıktan sonra Java&amp;rsquo;daki implementasyonunu açıklayacağım.
İlk olarak biraz analoji kullanarak ve teknik detaylara girmeden konuyu ele alalım. HashMap, pek çok bölmeye sahip ve her bölmeye belli tip eşyaların girebileceği bir dolaba benzetilebilir. Örneğin bir ayakkabı bölmesine, bir kıyafet bölmesine, bir de kitap bölmesine sahip bir dolap&amp;hellip; Dolaba bir ayakkabı koyacağınız zaman ayakkabı bölmesine koymak zorundasınız.</description>
    </item>
    
    <item>
      <title>Tembel Olmak</title>
      <link>https://ugurhicyilmam.github.io/blog/tembel-olmak/</link>
      <pubDate>Tue, 07 Feb 2017 17:23:17 +0300</pubDate>
      
      <guid>https://ugurhicyilmam.github.io/blog/tembel-olmak/</guid>
      <description>Tembellik, toplum genelinde olumsuz bir özellik olarak değerlendirilir. Genel inanış, çok çalışmanın başarı için kaçınılmaz olduğu yönündedir. Aile içinde bile, &amp;ldquo;Ruşen amcanın oğlu Sedat&amp;rdquo; gibi çalışkan insanlar övülürken, ebeveynlerimiz tembelliğimizden dolayı bizlere çemkirir.
Sıkça yapılan bir hata, tembellik ile sorumsuzluğu karıştırmak&amp;hellip; Aslında, tembel olmak hiçbir şey yapmamak anlamına gelmiyor, sadece bir işi halletmenin daha kolay bir yolunu bulup, çok fazla çaba harcamaktan kaçınmak anlamına geliyor.
İş programlamaya geldiğinde, tembellik özellikle avantajlı oluyor.</description>
    </item>
    
    <item>
      <title>Anki Metodu</title>
      <link>https://ugurhicyilmam.github.io/blog/anki-metodu/</link>
      <pubDate>Tue, 31 Jan 2017 17:52:07 +0300</pubDate>
      
      <guid>https://ugurhicyilmam.github.io/blog/anki-metodu/</guid>
      <description>Programlama geniş bir alan ve hiç şüphe yok ki uzmanlaşmak uzun zaman alıyor. Eğer benim gibi bu alana geç başlamış ve üstüne üstlük sabırsızsanız, bu yazı tam sizlik.
Programlamaya ilk başladığım yılda pek çok kitap okudum, video izledim, kütüphane öğrendim. Yılın sonunda üzülerek farkettim ki, öğrendiklerimin %90&amp;rsquo;ı buharlaşmış. Aklımda yalnızca sık kullandığım %10&amp;rsquo;luk kısım kalmış.
Unutmanın önüne geçebilmek için ilk olarak defter tutmaya başladım. Planım belirli aralıklarla tuttuğum notların üzerinden geçerek unutmayı en aza indirmekti.</description>
    </item>
    
  </channel>
</rss>